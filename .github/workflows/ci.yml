name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install FFmpeg (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt update
        sudo apt install -y ffmpeg
    
    - name: Install FFmpeg (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install ffmpeg
    
    - name: Install FFmpeg (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows uses included ffmpeg.exe
        echo "Using included ffmpeg.exe"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test import
      run: |
        python -c "import whisper; print('Whisper imported successfully')"
        python -c "from src.video_english_recognition import VideoEnglishRecognizer; print('Module imported successfully')"
    
    - name: Run basic tests
      run: |
        python -c "
        from src.video_english_recognition import VideoEnglishRecognizer
        recognizer = VideoEnglishRecognizer(model_size='tiny')
        print('Basic test passed')
        "

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        pip install -r requirements.txt
    
    - name: Check code formatting with black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Type checking with mypy
      run: mypy src/ --ignore-missing-imports